name: official Flutter Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Add this section to grant the necessary permissions
permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # Manual, reliable installation of Inno Setup with all components
      - name: Install Inno Setup with Languages
        shell: pwsh
        run: |
          # Download the official Inno Setup installer
          Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe" -OutFile "innosetup_installer.exe"
          
          # Run the installer silently with ALL components (including languages  )
          # The /ALLCOMPONENTS flag is crucial here.
          $p = Start-Process -FilePath ".\innosetup_installer.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/ALLCOMPONENTS" -Wait -PassThru
          
          # Check if the installation was successful
          if ($p.ExitCode -ne 0) {
            throw "Inno Setup installation failed with exit code $($p.ExitCode)"
          }
          
          # Add the Inno Setup directory to the system PATH for this job
          echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Clean up the installer
          Remove-Item "innosetup_installer.exe"

      - name: Install dependencies
        run: flutter pub get

      - name: Verify Flutter installation
        run: flutter doctor -v

      - name: Build Flutter Windows
        run: flutter build windows --release

      - name: Create installer
        run: |
          $issFile = Get-ChildItem -Path . -Filter "*.iss" -Recurse | Select-Object -First 1
          if ($null -eq $issFile) {
            Write-Error "No Inno Setup script (.iss file) found in the repository"
            exit 1
          }
          # Now we can call iscc directly because it's in the PATH
          iscc $issFile.FullName

      - name: Find installer
        id: find-installer
        run: |
          $installer = Get-ChildItem -Path . -Filter "*.exe" -Recurse | Where-Object { $_.Name -like "*Setup*.exe" } | Select-Object -First 1
          if ($null -eq $installer) {
            Write-Error "No installer file found"
            exit 1
          }
          echo "installer_path=$($installer.FullName)" >> $env:GITHUB_OUTPUT
          echo "installer_name=$($installer.Name)" >> $env:GITHUB_OUTPUT

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ steps.find-installer.outputs.installer_path }}

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Flutter Windows Desktop Release"
          files: ${{ steps.find-installer.outputs.installer_path }}
          draft: false
          prerelease: false
